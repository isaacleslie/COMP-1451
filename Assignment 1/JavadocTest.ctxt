#BlueJ class context
comment0.params=folder\ name
comment0.target=boolean\ accept(java.io.File,\ java.lang.String)
comment0.text=\r\n\ The\ test\ module\ is,\ itself,\ a\ file\ filter\ --\r\n\ processing\ only\ those\ files\ in\ the\ folder\ JavadocTest\ occupies\r\n\ ending\ in\ the\ file\ extension\ ".java".\r\n\ @param\ folder\ \ \ \ place\ where\ the\ filter-subjects\ are\ being\ found;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ this\ parameter\ is\ ignored\ because\ I\ dictate\ elsewhere\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ that\ the\ location\ will\ always,\ always\ be\ "."\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [the\ 'working\ directory']\r\n\ @param\ name\ \ \ \ \ \ the\ file\ identifier\ that\ we\ are\ filtering\r\n\ @return\ \ \ \ \ \ \ \ \ \ true\ if\ and\ only\ if\ {name}\ ends\ with\ ".java"\r\n
comment1.params=s\ pattern
comment1.target=java.util.Stack\ scanIntoStack(java.util.Scanner,\ java.lang.String)
comment1.text=\r\n\ Regular\ Expressions\ are\ capable\ of\ returning\ several\ matches,\r\n\ but\ there's\ this\ multi-step\ process\ that\ doesn't\ produce\ tidy\ results.\r\n\ I've\ created\ this\ helper\ method\ for\ testJavadoc()\r\n\ so\ that\ the\ process\ is\ condensed\ and\ reusable.\r\n\ @param\ s\ \ \ \ \ \ \ \ \ a\ Scanner\ object,\ which\ is\ wrapping\ and\ streaming\ some\ String-based\ source;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ this\ is\ where\ the\ {pattern}\ will\ be\ found\r\n\ @param\ pattern\ \ \ the\ Regular\ Expression\ matching\ string;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ look\ up\ RegEx\ on\ the\ Internet\ --\ it's\ complicated,\ but\ important\r\n\ @return\ \ \ \ \ \ \ \ \ \ Stack\ of\ matches;\ it\ was\ most\ convenient\ to\ organize\ first-in-last-out\r\n
comment2.params=
comment2.target=void\ evaluateFilesInThisFolder()
comment2.text=\r\n\ This\ beautiful\ monstrosity\ is\ a\ file\ parser\ that\ finds\ methods\r\n\ and\ compares\ their\ parameters\ to\ preceding\ javadoc.\r\n\ Students\ will\ be\ advised\ if\ there\ is\ an\ undocumented\ parameter.\r\n\ In\ the\ case\ of\ even\ one\ mistake,\ the\ preferred\ style\ will\ be\ detailed.\r\n\ \r\n\ Since\ this\ technology\ is\ 'in\ the\ neighborhood',\r\n\ it\ also\ verifies\ that\ class\ headers\ are\ not\ left\ as\ the\ IDE-generated\r\n\ default,\ and\ that\ return\ values\ are\ also\ documented\ to\ standard.\r\n\ \r\n\ Assumptions/Weaknesses\ of\ algorithm\:\r\n\ -\ Blocks\ are\ begun\ where\ opening\ braces\ come\ at\ the\ end\ of\ a\ line.\r\n\ \ \ \ \ \ (Could\ be\ false\ if\ a\ student\ begins\ code\ and\ block\ in\ the\ same\ line.\r\n\ \ \ \ \ \ This\ would\ be\ a\ practice\ that\ we'd\ like\ to\ discourage\ anyway.)\r\n\ -\ Multiline\ comments\ don't\ end\ a\ line\ with\ an\ opening\ brace.\r\n\ \ \ \ \ \ (The\ only\ reason\ I\ can\ predict\ this\ happening\ is\ if\r\n\ \ \ \ \ \ someone\ had\ a\ code\ sample\ in\ javadoc.\ \ Possible.\ \ Unlikely?)\r\n\ -\ Class\ names\ and\ method\ names\ don't\ have\ numbers\ in\ them.\r\n
numComments=3
